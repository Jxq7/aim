_G.DynamicBoneSelection = false 
_G.DefaultBone = "Head" 
_G.SmoothFactor = 9 
_G.TargetRefreshRate = 0.1 
_G.VisibilityCheck = false 
_G.TeamCheck = false 
_G.AimAssistMode = false
_G.isAimbotEnabled = false 

local player = game:GetService("Players").LocalPlayer
local mouse = player:GetMouse()
local camera = workspace.CurrentCamera
local runService = game:GetService("RunService")
local userInput = game:GetService("UserInputService")

local currentTarget = nil
local lastTargetTime = 0

local function isTargetValid(target)
    return target
        and target.Character
        and target.Character:FindFirstChild("Humanoid")
        and target.Character.Humanoid.Health > 0
end

local function isTargetVisible(targetBone)
    local ignoreList = {player.Character, workspace:FindFirstChild("Ignore")}
    local params = RaycastParams.new()
    params.FilterType = Enum.RaycastFilterType.Blacklist
    params.FilterDescendantsInstances = ignoreList

    local result = workspace:Raycast(camera.CFrame.Position, (targetBone.Position - camera.CFrame.Position), params)
    return result == nil or result.Instance:IsDescendantOf(targetBone.Parent)
end

local function isSameTeam(target)
    return _G.TeamCheck and target.Team and player.Team and target.Team == player.Team
end

userInput.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        _G.isAimbotEnabled = not _G.isAimbotEnabled
    end
end)

local function getClosestTarget()
    local closestTarget, shortestDistance = nil, math.huge
    for _, v in ipairs(game:GetService("Players"):GetPlayers()) do
        if v ~= player and isTargetValid(v) and not isSameTeam(v) then
            local bone = v.Character:FindFirstChild(_G.DefaultBone)
            if bone then
                local bonePos, onScreen = camera:WorldToViewportPoint(bone.Position)
                local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(bonePos.X, bonePos.Y)).Magnitude

                if onScreen and bonePos.Z > 0 and distance < shortestDistance then
                    if not _G.VisibilityCheck or isTargetVisible(bone) then
                        shortestDistance = distance
                        closestTarget = v
                    end
                end
            end
        end
    end
    return closestTarget
end

local function aimCameraAtTarget(target)
    local bone = target.Character[_G.DefaultBone]
    local aimCFrame = CFrame.new(camera.CFrame.Position, bone.Position)
    local smoothFactor = 1 / math.clamp(10 - _G.SmoothFactor, 1, 10)
    camera.CFrame = camera.CFrame:Lerp(aimCFrame, smoothFactor)
end

local function aimMouseAtTarget(target)
    local bone = target.Character:FindFirstChild(_G.DefaultBone)
    if bone then
        local bonePos = camera:WorldToViewportPoint(bone.Position)
        local targetX, targetY = math.floor(bonePos.X), math.floor(bonePos.Y)

     -- // fallbacks
        if syn and syn.mousemoveabs then
            syn.mousemoveabs(targetX, targetY)
        elseif mousemoveabs then
            mousemoveabs(targetX, targetY)
        elseif InputSimulator and InputSimulator.MouseMove then
            InputSimulator.MouseMove(targetX, targetY)
        end
    end
end


runService.RenderStepped:Connect(function()
    if _G.isAimbotEnabled then
        if os.clock() - lastTargetTime > _G.TargetRefreshRate then
            currentTarget = getClosestTarget()
            lastTargetTime = os.clock()
        end

        if currentTarget then
            if _G.AimAssistMode then
                aimMouseAtTarget(currentTarget)
            else
                aimCameraAtTarget(currentTarget)
                aimMouseAtTarget(currentTarget)
            end
        end
    end
end)
